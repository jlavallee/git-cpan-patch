#!/usr/bin/perl

# Do a complete git-ificaiton of BackPAN.  Or give it just a few modules.

use strict;
use warnings;
use v5.10;

use Git::CPAN::Patch::Import;
use File::chdir;
use Getopt::Long;

# Github currently limits repo names to 100 characters
use constant MAX_LENGTH_GITHUB_REPO_NAME => 100;

my %Dists_To_Skip = map { $_ => 1 } qw(
    perl
    parrot
    parrot-cfg
);

# Defaults
my %opts = (
    update      => 1,
);

GetOptions(
    \%opts,
    "backpan:s",
    "login=s",
    "token=s",
    "author=s",
    "github!",
    "random=i",
    "pattern=s",
    "sort!",
    "repodir=s",
    "tempdir=s",
    "update",
    "since=s"
);

my @dists;
if( @ARGV ) {
    @dists = @ARGV;
}
else {
    my $backpan = Git::CPAN::Patch::Import->backpan_index;

    my $dists = $backpan->dists;

    if( $opts{since} ) {
        $dists = $dists->search( latest_date => \">= $opts{since}" );
    }

    if( $opts{random} ) {
        my $num = $opts{random};

        $dists = $dists->search( undef, { order_by => \'random()', rows => $num } );
    }
    elsif( $opts{sort} ) {
        $dists = $dists->search( undef, { order_by => 'name' } );
    }

    if( $opts{author} ) {
        $dists = $dists->search({ "releases.cpanid" => $opts{author} },
                                { join => "releases", distinct => 1 });
    }

    @dists = $dists->all;

    if( $opts{pattern} ) {
        @dists = grep /$opts{pattern}/, @dists;
    }
}


@dists = filter_dists(@dists);

@dists = sort { lc $a cmp lc $b } @dists if $opts{sort};

my %backpan_init_opts;
$backpan_init_opts{"backpan"} = [split /,/, $opts{backpan}] if $opts{backpan};
$backpan_init_opts{"tempdir"} = $opts{tempdir} if $opts{tempdir};
$backpan_init_opts{"update"}  = $opts{update};

say "Looking at @{[ scalar @dists ]} dists";

local $CWD = $opts{repodir} if defined $opts{repodir};
for my $dist (@dists) {
    next if $Dists_To_Skip{$dist};

    # MARCEL has -0.01.tar.gz
    # Should probably be filtered out by Parse::BACKPAN or
    # made into a dist called empty string.
    next if $dist =~ /^-[\d.]+$/;

    if( $opts{github} ) {
        if( !$opts{update} and does_repo_exist("gitpan", $dist) ) {
            print "$dist already exists on github, skipping\n";
            next;
        }
    }

    my $repo_dir = Git::CPAN::Patch::Import::import_from_backpan(
        $dist,
        { %backpan_init_opts, "mkdir" => "", init_repo => 1 }
    );

    unless( $repo_dir) {
        say "No repository created for $dist.  Skipping";
        next;
    }

    local $CWD = $repo_dir;

    system "rm .git/hooks/*.sample";
    system "git", "gc";

    if( $opts{github} ) {
        my $repo = "$dist";
        if( !$opts{update} or !does_repo_exist_on_github($opts{login}, $dist) ) {
            my $response = github_action("create_repo", {
                login           => $opts{login},
                token           => $opts{token},
                name            => $dist,
                description     => "Release history of $dist",
                homepage        => "http://search.cpan.org/dist/$dist/",
                public          => 1,
            });

            $repo = $response->{repository}{name};
        }

        # Sometimes we re-clone from gitpan and so the origin is wrong
        system "git", "remote", "rm", "origin";
        system "git", "remote", "add", "origin", "git\@github-gitpan:gitpan/$repo.git";

        # sometimes github doesn't have the repo ready immediately after create_repo
        # returns, so if push fails try it again.
        do_with_back_off(6, sub {
            system "git", "push", "origin", "master";
            return $? == 0;
        });
        system "git", "push", "origin", "--tags";
    }

    # Delete everything but the .git/ directory to save space
    # We name the directory specifically to avoid accidentally
    # deleting everything should we be in the wrong cwd

    die "Weird!  $repo_dir doesn't look ok" unless repo_dir_looks_ok($repo_dir);
    system "rm -rf $repo_dir/*";
}

use LWP::UserAgent;
use HTTP::Request::Common qw(POST);
use JSON::XS;

sub _do_github_action {
    state $ua = LWP::UserAgent->new;

    state $actions = {
        create_repo => sub { 'repos/create' },
        delete_repo => sub { 'repos/delete' },
        repo_info   => sub {
            my $opts = shift;
            sprintf 'repos/show/%s/%s',
              $opts->{user},
              $opts->{name}
        },
    };

    my $action = shift;
    my $opts   = shift;

    my $url = "http://github.com/api/v2/json/";
    $url .= $actions->{$action}->($opts);

    my $req = POST $url, [
        %$opts
    ];

    # Sometimes github gets confused but sorts it out quickly
    my $response = do_with_back_off(4, sub {
        my $response = $ua->request($req);
        return if $response->code == 500;
        return $response;
    });

    my $content = $response->content;
    print "Github said: $content\n";

    return decode_json($content);
}


sub github_action {
    my @args = @_;

    my $response = do_with_back_off(6, sub {
        my $response = _do_github_action(@args);

        return if is_too_many_requests($response);
        return $response;
    });

    return $response;
}


sub is_too_many_requests {
    my $response = shift;
    return $response->{error} && ($response->{error}[0]{error} =~ /too many requests/);
}


sub does_repo_exist {
    my $user = shift;
    my $repo = shift;

    # This is far faster than asking github about every one
    return 1 if -e "$repo/.git/refs/remotes/origin/";

    return does_repo_exist_on_github($user, $repo);
}

sub does_repo_exist_on_github {
    my $user = shift;
    my $repo = shift;

    my $response = github_action("repo_info", {
        user    => $user,
        name    => $repo
    });
    return 0 if $response->{error};
    return 1;
}


sub filter_dists {
           # filter out garbage the BackPAN index picks up
    return grep !/^[\d._\-]+(\.U)?$/,
           # filter out dists too long to go into github, rather
           # than put them in with the wrong name.  I have a ticket
           # in with github to increase the max
           grep { length $_ <= MAX_LENGTH_GITHUB_REPO_NAME }
                @_;
}

sub repo_dir_looks_ok {
    my ( $repo_dir ) = @_;

    return 0 unless defined $repo_dir                          # it's defined
                 && $repo_dir =~ /[^/]+/                       # and more than just /
                 && -d File::Spec->catfile($repo_dir, '.git')  # and has a git repo 
    ;
    return 1;
}

sub do_with_back_off {
    my($number, $code) = @_;

    my $ret;
    for my $backoff (1..$number) {
        $ret = $code->();
        last if $ret;

        sleep 2**$backoff;
    }

    die "Command failed after $number back off and retries" unless $ret;
    return $ret;
}


__END__

=head1 NAME

gitpan - Import all of BackPAN to github

=head1 SYNOPSIS

    gitpan [options] [dist] [dist] ...

=head1 DESCRIPTION

gitpan is a script to import large chunks (or all of) BackPAN into git
and github.  It allows you to select BackPAN distributions to import
and control importing to github.

=head1 OPTIONS

=head2 Distribution Selection

By default, gitpan will import every distribution on BackPAN.  You can
override this by passing it a list of distributions on the command
line or the following.

=head3 --author

Import all the options of a particular author.  Give it their CPAN id.
For example

    gitpan --author=MSCHWERN

=head3 --random

Pick N random distributions.

    gitpan --random=100

=head3 --pattern

Pick all distributions matching the given pattern.

    # Import all the D's.
    gitpan --pattern='^[Dd]'

=head3 --sort

Sort the distributions before processing

=head3 --since

Pick only distributions which have changed since the given time.

Time is given in Unix epoch time.

    gitpan --since=1200000000


=head2 Github

=head3 --github

If this option is passed, it will create a repository on github and
push the repo.

=head3 --login

Your github login name, only necessary if --github is set.

=head3 --token

Your github API token, only necessary if --github is set.


=head2 BackPAN

=head3 --backpan

A comma seperated list of URLs to BackPAN.  Handy to have a URL to a
local mirror for fast retrieval and one to a remote mirror for
completeness.

For example

    --backpan=file:///var/local/backpan,http://backpan.perl.org

Defaults to http://backpan.perl.org/

=head2 Building

=head3 --tempdir

The temporary directory gitpan uses.

Defaults to whatever L<File::Temp> does.

=head3 --repodir

Where gitpan will look for and place local copies of the repositories.

=head3 --update

Whether or not to update existing repositories.

Defaults to true.


=head1 EXAMPLE

Here is how gitpan does its importing.

    gitpan --github --login=gitpan --token=wouldntyoulikeotknow         \
           --backpan=file:///var/local/backpan                          \
           --tempdir=$PWD/gitpan-build/temp --repodir=$PWD/gitpan-build/repos \
           --pattern='^[Ff]' --sort

That says to use file:///var/local/backpan as the BackPAN mirror (a
local repo), build in gitpan-build/ (a case-sensitive disk image),
create repositories on gitpan's account on github, and import all the
distributions starting with "F" or "f" in order.

=cut
